

service: notes-api-2
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs14.x
  stage: dev
  region: us-east-1


functions:
  authorizer:
    handler: authorizer.handler
    environment:
      COGNITO_USERPOOL_ID: !Ref cognitoUserPool
      COGNITO_WEB_CLIENT_ID: !Ref cognitoUserPoolWebClient

  createNotes:
    handler: handler.createNote
    environment:
      NOTES_TABLE_NAME: !Ref notesTablecmbx
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    iamRoleStatements:
     -  Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: !GetAtt notesTablecmbx.Arn
    events:
    - http:
        method: post
        path: notes
        authorizer: authorizer

  updateNote:
    handler: handler.updateNote
    environment:
      NOTES_TABLE_NAME: !Ref notesTablecmbx
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    iamRoleStatements:
     -  Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: !GetAtt notesTablecmbx.Arn
    events:
    - http:
        method: put
        path: notes/{id}
        authorizer: authorizer

  deleteNote:
    handler: handler.deleteNote
    environment:
      NOTES_TABLE_NAME: !Ref notesTablecmbx
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    iamRoleStatements:
     -  Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: !GetAtt notesTablecmbx.Arn
    events:
    - http:
        method: delete
        path: notes/{id}
        authorizer: authorizer

  getAllNotes:
    handler: handler.getAllNotes
    environment:
      NOTES_TABLE_NAME: !Ref notesTablecmbx
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    iamRoleStatements:
     -  Effect: Allow
        Action:
          - dynamodb:Scan
        Resource: !GetAtt notesTablecmbx.Arn
    events:
    - http:
        method: get
        path: notes
        authorizer: 
          name: myNotesUserPoolAuthorizer
          type: COGNITO_USER_POOLS
          arn: !GetAtt cognitoUserPool.Arn
# This is where we configure our resources in cloud formation for our application
plugins:
  - serverless-iam-roles-per-function
resources:
  Resources:
    ${file(resources.yml)}


        

        






# In resources we have to give a logical name for our dynamodb table.
# AttributeDefinitions property:-
#   A list of attributes that describe the key schema for the table and indexes

